
-- Line 1:
explain('




select
    TOP 100
    	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 314
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate;
')
REPORT
VARCHAR
_______________________________________________________________________________

{ 
{ fork
{ fork
Subquery 27 
{ 
{ fork
lineitem         6 rows(t5.l_orderkey, t5.l_quantity)
 
Sort (t5.l_orderkey) -> (t5.l_quantity)
 
}
group by read node  
(t5.l_orderkey, aggregate)
END Node
After test:
      0: if (aggregate >  314 ) then 4 else 5 unkn 5
      4: BReturn 1
      5: BReturn 0
 
After code:
      0: l_orderkey :=  := artm t5.l_orderkey
      4: BReturn 0
Subquery Select(l_orderkey)
}
orders unq      0.03 rows (.o_custkey, .o_orderkey, .o_orderdate, .o_totalprice)
 inlined  o_orderkey = l_orderkey
customer unq        -1 rows (.c_name, .c_custkey)
 inlined  c_custkey = .o_custkey
lineitem        -6 rows(.l_quantity)
 inlined  l_orderkey = k_.o_orderkey
Sort (.c_name, .c_custkey, .o_orderkey, .o_orderdate, .o_totalprice) -> (.l_quantity)
 
}
group by read node  
(.c_name, .c_custkey, .o_orderkey, .o_orderdate, .o_totalprice, aggregate)
Sort (.o_totalprice, .o_orderdate) -> (.c_name, .c_custkey, .o_orderkey, aggregate)
 
}
top order by read (.c_name, .c_custkey, .o_orderkey, .o_orderdate, .o_totalprice, aggregate)
Select (.c_name, .c_custkey, .o_orderkey, .o_orderdate, .o_totalprice, aggregate)
}
